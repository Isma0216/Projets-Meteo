const openWeatherApiKey = "2f8795480d5cbefc7d7e72992181bfc0";
const cities = ["New York", "Paris", "Tokyo", "Londres", "Moscou", "Sydney", "Berlin", "Rio de Janeiro", "Cape Town", "P√©kin"];



// Fonction g√©n√©rique pour r√©cup√©rer des donn√©es m√©t√©o
async function fetchWeatherData(url) {
    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`Erreur HTTP ! Statut : ${response.status}`);
        const data = await response.json();

        // V√©rification si l'API retourne une erreur
        if (data.cod && parseInt(data.cod) !== 200) {
            throw new Error(`Erreur API : ${data.message}`);
        }

        return data;
    } catch (error) {
        console.error("Erreur API :", error);
        alert("Probl√®me lors de la r√©cup√©ration des donn√©es : " + error.message);
        return null; // Arr√™te l'ex√©cution en cas d'erreur
    }
}
// R√©cup√©ration et affichage de la m√©t√©o d'une ville
async function fetchWeather() {
    const city = document.getElementById("search-city").value.trim();
    if (!city) return alert("Veuillez entrer une ville.");
    
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${openWeatherApiKey}`;
    const data = await fetchWeatherData(url);
    if (!data || !data.main || !data.wind) return;

    const temp = data.main.temp;
    const humidity = data.main.humidity;
    const wind = data.wind.speed;

    // Affichage des r√©sultats
    document.getElementById("weather-result").innerHTML = `
        <h3>M√©t√©o √† ${city}</h3>
        <p>üå°Ô∏è Temp√©rature : ${temp}¬∞C</p>
        <p>üíß Humidit√© : ${humidity}%</p>
        <p>üí® Vent : ${wind} km/h</p>
    `;
    
    fetchAltitudeWeather(data.coord.lat, data.coord.lon);
}



document.addEventListener("DOMContentLoaded", fetchCityTemperatures);

// R√©cup√©ration des coordonn√©es de la ville
async function getCityCoordinates(city) {
    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(city)}`;

    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error("Probl√®me lors de la r√©cup√©ration des coordonn√©es.");

        const data = await response.json();
        if (data.length === 0) throw new Error("Ville non trouv√©e.");

        // Extraction des coordonn√©es (premier r√©sultat)
        const { lat, lon } = data[0];
        return { lat, lon };
    } catch (error) {
        console.error("Erreur:", error);
        alert("Impossible de r√©cup√©rer les coordonn√©es de la ville.");
        return null;
    }
}

// R√©cup√©ration des donn√©es m√©t√©o en altitude
async function fetchAltitudeWeather(lat, lon, altitude = 1500) {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&elevation=${altitude}&current=temperature_2m,relative_humidity_2m,windspeed_10m`;

        const response = await fetch(url);
        if (!response.ok) throw new Error("Probl√®me lors de la r√©cup√©ration des donn√©es m√©t√©o.");

        const data = await response.json();
        if (!data.current) throw new Error("Donn√©es m√©t√©o non disponibles.");

        

        // Extraction des donn√©es m√©t√©o
        const tempAltitude = data.current.temperature_2m;
        const humidityAltitude = data.current.relative_humidity_2m;
        const windAltitude = data.current.windspeed_10m;

        // Affichage des donn√©es m√©t√©orologiques en altitude
        document.getElementById("altitude-data").innerHTML = `
            <h3>Donn√©es en Altitude</h3>
            <p>üèîÔ∏è Altitude : ${altitude}m</p>
            <p>üå°Ô∏è Temp√©rature : ${tempAltitude}¬∞C</p>
            <p>üíß Humidit√© : ${humidityAltitude}%</p>
            <p>üí® Vent : ${windAltitude} km/h</p>
        `;
    
    }

// Fonction principale qui r√©cup√®re la ville et lance la m√©t√©o
async function getWeatherForCity() {
    const city = document.getElementById("search-city2").value.trim();
    if (!city) return alert("Veuillez entrer une ville.");

    const coordinates = await getCityCoordinates(city);
    if (coordinates) {
        fetchAltitudeWeather(coordinates.lat, coordinates.lon);
    }
}




// R√©cup√©ration des temp√©ratures des grandes villes (d√©filement)
async function fetchCityTemperatures() {
    const cityList = document.getElementById("city-list");
    cityList.innerHTML = "";
    
    for (const city of cities) {
        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${openWeatherApiKey}`;
        const data = await fetchWeatherData(url);
        if (!data || !data.main) continue;
        
        const cityItem = document.createElement("span");
        cityItem.textContent = `${city} - ${data.main.temp}¬∞C`;
        cityList.appendChild(cityItem);
    }
}

// Ajout des cam√©ras en direct via l'API YouTube
function loadLiveCams() {
    const camContainer = document.getElementById("live-cams");
    if (!camContainer) return;

    const videoIds = ["5qap5aO4i9A", "9Auq9mYxFEE", "2mP6P6pK5IU"]; // IDs des vid√©os YouTube
    const locations = ["Tokyo", "Paris", "Los Angeles"]; // Noms des endroits correspondants

    // G√©n√®re dynamiquement les div pour chaque vid√©o et le nom de l'endroit
    videoIds.forEach((id, index) => {
        const camItemDiv = document.createElement("div");
        camItemDiv.className = "cam-item"; // Ajoute la classe pour aligner avec le CSS
        camItemDiv.style = "display: inline-block; margin: 10px;";

        const playerDiv = document.createElement("div");
        playerDiv.id = `player-${index}`;
        playerDiv.style = "margin: 0 auto;"; // Centre chaque vid√©o

        // Cr√©e un √©l√©ment pour le nom de l'endroit
        const locationDiv = document.createElement("p");
        locationDiv.textContent = `Emplacement : ${locations[index]}`;

        camItemDiv.appendChild(playerDiv);
        camItemDiv.appendChild(locationDiv);

        camContainer.appendChild(camItemDiv);
    });
}

// Fonction appel√©e quand l'API YouTube est charg√©e
function onYouTubeIframeAPIReady() {
    const videoIds = ["_k-5U7IeK8g", "4In_qA6dLcg", "3LXQWU67Ufk"];

    videoIds.forEach((id, index) => {
        new YT.Player(`player-${index}`, {
            height: '300',
            width: '400',
            videoId: id,
            playerVars: { 'autoplay': 1, 'controls': 1, 'mute' : 1 }
        });
    });
}

// Charge la section des cam√©ras d√®s que la page est pr√™te
document.addEventListener("DOMContentLoaded", function() {
    loadLiveCams();
});

// Ajoute le script de l'API YouTube
const tag = document.createElement("script");
tag.src = "https://www.youtube.com/iframe_api";
document.head.appendChild(tag);

// Ajout d'un EventListener pour lancer la recherche au clic sur un bouton
document.getElementById("search-btn").addEventListener("click", getWeatherForCity);